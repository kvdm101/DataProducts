y <- mutate(y, total = ncases + ncontrols, Sick = (ncases / total * 100))
View(y)
y <- mutate(y, total = ncases + ncontrols, Sick = round(ncases / total * 100),2)
View(y)
rm(y)
rm(y)
y <- mutate(y, total = ncases + ncontrols, Sick = round(ncases / total * 100),2)
y <- as.data.frame(esoph)
y <- mutate(y, total = ncases + ncontrols, Sick = round(ncases / total * 100),2)
View(y)
rm(y)
y <- as.data.frame(esoph)
y <- mutate(y, total = ncases + ncontrols, Sick = round(ncases / total * 100))
View(y)
y <- mutate(y, total = ncases + ncontrols, Sick = round(ncases / total * 100), Healthy = round(ncontrols / total * 100))
View(y)
View(y)
x <- select(y, agegp, alcgp, tobgp, Sick, Healty)
x <- select(y, agegp, alcgp, tobgp, Sick, Healthy)
barplot(prop.table(y, 2) )
barplot(prop.table(x, 2) )
x <- as.matrix(x)
barplot(prop.table(x, 2) )
ggplot(x, aes(x=agegp, y=Sick)) + geom_bar(stat="identity", fill="#FF9999", colour="black")
x <- select(y, agegp, alcgp, tobgp, Sick, Healthy)
ggplot(x, aes(x=agegp, y=Sick)) + geom_bar(stat="identity", fill="#FF9999", colour="black")
p <- ggplot(y, aes(agegp, ncases, colour = Healthy))
p + geom_line()
p <- ggplot(y, aes(agegp, ncases, colour = ncontrols))
p + geom_line()
ggplot(y, aes(x = agegp)) +
geom_line(aes(y = ncases), colour="blue") +
geom_line(aes(y = ncontrols), colour = "grey") +
ylab(label="Number of Cases vs Controls") +
xlab("Age groups")
ggplot(y, aes(x = agegp)) +
geom_line(aes(y = ncases), colour="red") +
geom_line(aes(y = ncontrols), colour = "blue") +
ylab(label="Number of Cases vs Controls") +
xlab("Age groups")
ggplot(x, aes(x = agegp, y = Sick, colour = Healthy)) +
geom_line() +
ylab(label="Number of cases") +
xlab("Age Group") +
scale_colour_manual(values=c("grey", "blue"))
ggplot(x, aes(x = agegp, y = ncases, colour = Sick)) +
geom_line() +
ylab(label="Number of cases") +
xlab("Age Group") +
scale_colour_manual(values=c("grey", "blue"))
ggplot(x, aes(x = agegp, y = Healthy, colour = Sick)) +
geom_line() +
ylab(label="Number of cases") +
xlab("Age Group") +
scale_colour_manual(values=c("grey", "blue"))
ggplot(y, aes(x = agegp, y = Healthy, colour = Sick)) +
geom_line() +
ylab(label="Number of cases") +
xlab("Age Group") +
scale_colour_manual(values=c("grey", "blue"))
ggplot(y, aes(x = agegp)) +
geom_line(aes(y = ncases), colour="red") +
geom_line(aes(y = ncontrols), colour = "blue") +
ylab(label="Number of Cases vs Controls") +
xlab("Age groups")
ggplot(y, aes(x = agegp)) +
geom_line(aes(y = ncontrols), colour="blue") +
geom_line(aes(y = ncases), colour = "red") +
ylab(label="Number of Cases vs Controls") +
xlab("Age groups")
Figure29 <- ggplot(data=y, aes(x=factor(agegp),y=total,colour=factor(Sick)))
Figure29 + geom_line(aes(group=factor(alcgp),size=2)) + facet_grid(agegp~., scales="free_y", labeller=reg_labeller) + scale_colour_brewer(type = "div") +
theme(axis.text.x = element_text(colour = 'black', angle = 90, size = 13, hjust = 0.5, vjust = 0.5),axis.title.x=element_blank()) +
ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12, hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face = 'bold'))
Figure29 + geom_line(aes(group=factor(alcgp),size=2)) + facet_grid(agegp~., scales="free_y", labeller=agegp) + scale_colour_brewer(type = "div") +
theme(axis.text.x = element_text(colour = 'black', angle = 90, size = 13, hjust = 0.5, vjust = 0.5),axis.title.x=element_blank()) +
ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12, hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face = 'bold'))
Figure29 + geom_line(aes(group=factor(alcgp),size=2)) + facet_grid(agegp~., scales="free_y") + scale_colour_brewer(type = "div") +
theme(axis.text.x = element_text(colour = 'black', angle = 90, size = 13, hjust = 0.5, vjust = 0.5),axis.title.x=element_blank()) +
ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12, hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face = 'bold'))
Figure29 + geom_line(aes(group=factor(agegp),size=2)) + facet_grid(agegp~., scales="free_y") + scale_colour_brewer(type = "div") +
theme(axis.text.x = element_text(colour = 'black', angle = 90, size = 13, hjust = 0.5, vjust = 0.5),axis.title.x=element_blank()) +
ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12, hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face = 'bold'))
Figure29 + geom_line(aes(group=factor(Sick),size=2)) + facet_grid(agegp~., scales="free_y") + scale_colour_brewer(type = "div") +
theme(axis.text.x = element_text(colour = 'black', angle = 90, size = 13, hjust = 0.5, vjust = 0.5),axis.title.x=element_blank()) +
ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12, hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face = 'bold'))
Figure29 <- ggplot(data=y, aes(x=factor(tobgp),y=total,colour=factor(agegp)))
Figure29 + geom_line(aes(group=factor(alcgp),size=2)) + facet_grid(agegp~., scales="free_y") + scale_colour_brewer(type = "div") +
theme(axis.text.x = element_text(colour = 'black', angle = 90, size = 13, hjust = 0.5, vjust = 0.5),axis.title.x=element_blank()) +
ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12, hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face = 'bold'))
Figure29 <- ggplot(data=y, aes(x=factor(tobgp),y=Sick,colour=factor(agegp)))
Figure29 + geom_line(aes(group=factor(alcgp),size=2)) + facet_grid(agegp~., scales="free_y") + scale_colour_brewer(type = "div") +
theme(axis.text.x = element_text(colour = 'black', angle = 90, size = 13, hjust = 0.5, vjust = 0.5),axis.title.x=element_blank()) +
ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12, hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face = 'bold'))
Figure29 <- ggplot(data=y, aes(x=factor(tobgp),y=Sick,colour=factor(Healthy)))
Figure29 + geom_line(aes(group=factor(alcgp),size=2)) + facet_grid(agegp~., scales="free_y") + scale_colour_brewer(type = "div") +
theme(axis.text.x = element_text(colour = 'black', angle = 90, size = 13, hjust = 0.5, vjust = 0.5),axis.title.x=element_blank()) +
ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12, hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face = 'bold'))
Figure29 <- ggplot(data=y, aes(x=factor(tobgp),y=Sick,colour=factor(Healthy)))
Figure29 + geom_line(aes(group=factor(alcgp),size=2)) + facet_grid(alcgp~., scales="free_y") + scale_colour_brewer(type = "div") +
theme(axis.text.x = element_text(colour = 'black', angle = 90, size = 13, hjust = 0.5, vjust = 0.5),axis.title.x=element_blank()) +
ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12, hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face = 'bold'))
Figure29 <- ggplot(data=y, aes(x=factor(tobgp),y=Sick,colour=factor(Sick)))
Figure29 + geom_line(aes(group=factor(alcgp),size=2)) + facet_grid(alcgp~., scales="free_y") + scale_colour_brewer(type = "div") +
theme(axis.text.x = element_text(colour = 'black', angle = 90, size = 13, hjust = 0.5, vjust = 0.5),axis.title.x=element_blank()) +
ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12, hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face = 'bold'))
Figure29 <- ggplot(data=y, aes(x=factor(tobgp),y=Sick,colour=factor(ncases)))
Figure29 + geom_line(aes(group=factor(alcgp),size=2)) + facet_grid(alcgp~., scales="free_y") + scale_colour_brewer(type = "div") +
theme(axis.text.x = element_text(colour = 'black', angle = 90, size = 13, hjust = 0.5, vjust = 0.5),axis.title.x=element_blank()) +
ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12, hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face = 'bold'))
Figure29 <- ggplot(data=y, aes(x=factor(tobgp),y=Sick,colour=factor(ncases)))
Figure29 + geom_line(aes(group=factor(alcgp),size=2)) + facet_grid(agegp~., scales="free_y") + scale_colour_brewer(type = "div") +
theme(axis.text.x = element_text(colour = 'black', angle = 90, size = 13, hjust = 0.5, vjust = 0.5),axis.title.x=element_blank()) +
ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12, hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face = 'bold'))
Figure29 <- ggplot(data=y, aes(x=factor(tobgp),y=Sick,colour=factor(ncases)))
Figure29 + geom_line(aes(group=factor(alcgp),size=1)) + facet_grid(agegp~., scales="free_y") + scale_colour_brewer(type = "div") +
theme(axis.text.x = element_text(colour = 'black', angle = 90, size = 13, hjust = 0.5, vjust = 0.5),axis.title.x=element_blank()) +
ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12, hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face = 'bold'))
Figure29 <- ggplot(data=y, aes(x=factor(tobgp),y=Sick,colour=factor(ncases)))
Figure29 + geom_line(aes(group=factor(alcgp),size=0.5)) + facet_grid(agegp~., scales="free_y") + scale_colour_brewer(type = "div") +
theme(axis.text.x = element_text(colour = 'black', angle = 90, size = 13, hjust = 0.5, vjust = 0.5),axis.title.x=element_blank()) +
ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12, hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face = 'bold'))
Figure29 <- ggplot(data=y, aes(x=factor(tobgp),y=Sick,colour=factor(ncases)))
Figure29 + geom_line(aes(group=factor(alcgp),size=2)) + facet_grid(agegp~., scales="free_y") + scale_colour_brewer(type = "div") +
theme(axis.text.x = element_text(colour = 'black', angle = 90, size = 13, hjust = 0.5, vjust = 0.5),axis.title.x=element_blank()) +
ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12, hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face = 'bold'))
Figure29 <- ggplot(data=y, aes(x=factor(tobgp),y=Sick,colour=factor(ncases)))
Figure29 + geom_line(aes(group=factor(agegp),size=2)) + facet_grid(alcgp~., scales="free_y") + scale_colour_brewer(type = "div") +
theme(axis.text.x = element_text(colour = 'black', angle = 90, size = 13, hjust = 0.5, vjust = 0.5),axis.title.x=element_blank()) +
ylab("FSI (%Change)") + theme(axis.text.y = element_text(colour = 'black', size = 12), axis.title.y = element_text(size = 12, hjust = 0.5, vjust = 0.2)) +
theme(strip.text.y = element_text(size = 11, hjust = 0.5, vjust = 0.5, face = 'bold'))
y <- as.data.frame(esoph)
library(dplyr)
y <- mutate(y, total = ncases + ncontrols, Sick = round(ncases / total * 100), Healthy = round(ncontrols / total * 100))
with(y, table(ncases, ncontrols))
View(y)
tab <- with(y, table(agegp, alcgp, tobgp))
tab/sum(tab)
y <- as.data.frame(esoph)
tab <- with(y, table(agegp, alcgp, tobgp))
tab/sum(tab)
x <- select(y, agegp, tobgp, alcgp, ncases)
tab <- with(x, table(agegp, alcgp, tobgp))
tab/sum(tab)
round(tab/sum(tab),3)
y <- as.data.frame(esoph)
ggplot(y, aes(x = agegp, fill = alcgp)) + geom_bar()
ggplot(y, aes(x = ncases, fill = alcgp)) + geom_bar()
ggplot(y, aes(x = alcgp, fill = agegp)) + geom_bar()
ggplot(y, aes(x = alcgp, fill = agegp)) + geom_bar() + geom_abline(ddata = ncases)
ggplot(y, aes(x = alcgp, fill = agegp)) + geom_bar() + geom_abline(data = ncases)
ggplot(y, aes(x = alcgp, fill = agegp)) + geom_bar() + geom_line(y, aes(x = ncases))
ggplot(y, aes(x = alcgp, fill = agegp))
ggplot(y, aes(x = alcgp, fill = agegp)) + geom_boxplot()
ggplot(y, aes(x = alcgp, fill = agegp)) + geom_hline()
ggplot(y, aes(x = alcgp, fill = agegp)) + geom_bar()
ggplot(y, aes(x = alcgp, fill = agegp)) + geom_bar(position = "fill")
ggplot(y, aes(x = ncases, fill = agegp)) + geom_bar(position = "fill")
ggplot(y, aes(x = alcgp, fill = agegp)) + geom_bar(position = "fill")
View(y)
ggplot(y, aes(x = agegp, y = alcgp)) + geom_boxplot() + coord_flip()
ggplot(y, aes(x = agegp, y = alcgp)) + geom_boxplot() + coord_cartesian()
ggplot(y, aes(x = agegp, y = tobgp)) + geom_boxplot() + coord_cartesian()
ggplot(y, aes(x = agegp, y = tobgp)) + geom_boxplot() + coord_equal()
ggplot(y, aes(x = agegp, y = tobgp)) + geom_boxplot() + coord_flip()
ggplot(y, aes(x = agegp, y = tobgp)) + geom_boxplot() + coord_trans()
ggplot(y, aes(x = agegp, y = tobgp)) + geom_boxplot() + coord_flip()
ggplot(y, aes(x = alcgp, y = tobgp)) + geom_histogram() + facet_grid(agegp ~ .)
ggplot(y, aes(x = alcgp, y = tobgp)) + geom_bar() + facet_grid(agegp ~ .)
ggplot(y, aes(x = alcgp, y = tobgp)) + geom_line() + facet_grid(agegp ~ .)
ggplot(y, aes(x = alcgp, y = tobgp)) + geom_line() + facet_grid(agegp ~ tobgp)
ggplot(y, aes(x = alcgp, y = tobgp)) + geom_abline() + facet_grid(agegp ~ tobgp)
ggplot(y, aes(x = agegp)) +
geom_line(aes(y = ncontrols), colour="blue") +
geom_line(aes(y = ncases), colour = "red") +
ylab(label="Number of Cases vs Controls") +
xlab("Age groups")
ggplot(y, aes(x = factor(agegp))) + geom_bar(stat = "bin")
ggplot(y, aes(x = agegp)) +
geom_line(aes(y = ncontrols), colour="blue") +
geom_line(aes(y = ncases), colour = "red") +
ylab(label="Number of Cases vs Controls") +
xlab("Age groups")
ggplot(y, aes(x = agegp)) +
geom_line(aes(y = ncontrols), colour="blue", size = 2) +
geom_line(aes(y = ncases), colour = "red") +
ylab(label="Number of Cases vs Controls") +
xlab("Age groups")
ggplot(y, aes(x = agegp)) +
geom_line(aes(y = ncontrols), colour="blue", size = 2) +
geom_line(aes(y = ncases), colour = "red", size = 2) +
ylab(label="Number of Cases vs Controls") +
xlab("Age groups")
ggplot(y, aes(x = agegp)) +
geom_line(aes(y = ncontrols), colour="blue", size = 20) +
geom_line(aes(y = ncases), colour = "red", size = 20) +
ylab(label="Number of Cases vs Controls") +
xlab("Age groups")
ggplot(y, aes(x = agegp)) +
geom_line(aes(y = ncontrols), colour="blue", size = 10) +
geom_line(aes(y = ncases), colour = "red", size = 10) +
ylab(label="Number of Cases vs Controls") +
xlab("Age groups")
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
View(y)
y <- mutate(y, total = ncases + ncontrols, Sick = round(ncases / total * 100), Healthy = round(ncontrols / total * 100))
View(y)
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
library(MASS)
y <- as.data.frame(esoph)
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
View(y)
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Gapminder shiny app')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
ggplot(y, aes(x = agegp)) +
geom_line(aes(y = ncontrols), colour="blue", size = 10) +
geom_line(aes(y = ncases), colour = "red", size = 10) +
ylab(label="Number of Cases vs Controls") +
xlab("Age groups")
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
alt = "This is alternate text"
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
imageOutput("image", height=300,
click = "image_click",
hover = hoverOpts(
id = "image_hover",
delay = 500,
delayType = "throttle"
),
brush = brushOpts(id = "image_brush")
)
),
column(width = 4,
verbatimTextOutput("image_clickinfo"),
verbatimTextOutput("image_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newimage", "New image")),
verbatimTextOutput("image_brushinfo")
)
)
),
server = function(input, output, session) {
output$image <- renderImage({
input$newimage
# Get width and height of image output
width  <- session$clientData$output_image_width
height <- session$clientData$output_image_height
# Write to a temporary PNG file
outfile <- tempfile(fileext = ".png")
png(outfile, width=width, height=height)
plot(rnorm(200), rnorm(200))
dev.off()
# Return a list containing information about the image
list(
src = outfile,
contentType = "image/png",
width = width,
height = height,
alt = "This is alternate text"
)
})
output$image_clickinfo <- renderPrint({
cat("Click:\n")
str(input$image_click)
})
output$image_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$image_hover)
})
output$image_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$image_brush)
})
}
)
shinyApp(
ui = basicPage(
fluidRow(
column(width = 4,
imageOutput("image", height=300,
click = "image_click",
hover = hoverOpts(
id = "image_hover",
delay = 500,
delayType = "throttle"
),
brush = brushOpts(id = "image_brush")
)
),
column(width = 4,
verbatimTextOutput("image_clickinfo"),
verbatimTextOutput("image_hoverinfo")
),
column(width = 4,
wellPanel(actionButton("newimage", "New image")),
verbatimTextOutput("image_brushinfo")
)
)
),
server = function(input, output, session) {
output$image <- renderImage({
input$newimage
# Get width and height of image output
width  <- session$clientData$output_image_width
height <- session$clientData$output_image_height
# Write to a temporary PNG file
outfile <- tempfile(fileext = ".png")
png(outfile, width=width, height=height)
plot(rnorm(200), rnorm(200))
dev.off()
# Return a list containing information about the image
list(
src = outfile,
contentType = "image/png",
width = width,
height = height,
alt = "This is alternate text"
)
})
output$image_clickinfo <- renderPrint({
cat("Click:\n")
str(input$image_click)
})
output$image_hoverinfo <- renderPrint({
cat("Hover (throttled):\n")
str(input$image_hover)
})
output$image_brushinfo <- renderPrint({
cat("Brush (debounced):\n")
str(input$image_brush)
})
}
)
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
library(MASS)
y <- as.data.frame(esoph)
names(y)
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shinyapps::setAccountInfo(name='kvdm101', token='45BBCF0097EB7360E95E8B13463100B9', secret='aGxsfli6X53vQgvt/QC5xub+feNpu5dAjl9POZ5q')
library(shiny)
runApp()
library(rsconnect)
deployApp()
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
library(ggplot2)
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
library(MASS)
y <- as.data.frame(esoph)
library(dplyr)
#y <- mutate(y, total = ncases + ncontrols, Sick = round(ncases / total * 100), Healthy = round(ncontrols / total * 100))
library(ggplot2)
ggplot(y, aes(x = agegp)) +
geom_line(aes(y = ncontrols), colour="blue", size = 10) +
geom_line(aes(y = ncases), colour = "red", size = 10) +
ylab(label="Number of Cases vs Controls") +
xlab("Age groups")
I have run out of time to change the column headings to more meaningful descriptions and get the application to work on that, so I included the descriptions of the variables in the format section in the beginning of this document to make the use of this application easier.
?suppressWarnings
```{r, suppressMessages("dplyr")}
shiny::runApp('Coursera/Data Science/R scripts/Data products assignment')
deployApp()
getwd()
setwd("C:/Users/Karin-PC/Documents/Coursera/Data Science/R Scripts/Data products assignment")
library(shiny)
runApp()
library(rsconnect)
deployApp()
rsconnect::deployApp
rsconnect::deployApp()
library(shiny)
#shinyapps::setAccountInfo(name='kvdm101', token='45BBCF0097EB7360E95E8B13463100B9', secret='aGxsfli6X53vQgvt/QC5xub+feNpu5dAjl9POZ5q')
setwd("C:/Users/Karin-PC/Documents/Coursera/Data Science/R scripts/Data products assignment")
#shinyapps::deployApp("C:/Users/Karin-PC/Documents/Coursera/Data Science/R scripts/Data products assignment")
rsconnect::deployApp("Data products assignment")
library(shiny)
#shinyapps::setAccountInfo(name='kvdm101', token='45BBCF0097EB7360E95E8B13463100B9', secret='aGxsfli6X53vQgvt/QC5xub+feNpu5dAjl9POZ5q')
setwd("C:/Users/Karin-PC/Documents/Coursera/Data Science/R Scripts/Data products assignment")
#shinyapps::deployApp("C:/Users/Karin-PC/Documents/Coursera/Data Science/R scripts/Data products assignment")
shinyapps::deployApp("Data products assignment")
library(shiny)
#shinyapps::setAccountInfo(name='kvdm101', token='45BBCF0097EB7360E95E8B13463100B9', secret='aGxsfli6X53vQgvt/QC5xub+feNpu5dAjl9POZ5q')
setwd("C:/Users/Karin-PC/Documents/Coursera/Data Science/R Scripts/Data products assignment")
#shinyapps::deployApp("C:/Users/Karin-PC/Documents/Coursera/Data Science/R scripts/Data products assignment")
shinyapps::deployApp("Data products assignment")
library(shiny)
#shinyapps::setAccountInfo(name='kvdm101', token='45BBCF0097EB7360E95E8B13463100B9', secret='aGxsfli6X53vQgvt/QC5xub+feNpu5dAjl9POZ5q')
setwd("C:/Users/Karin-PC/Documents/Coursera/Data Science/R Scripts/Data products assignment")
#shinyapps::deployApp("C:/Users/Karin-PC/Documents/Coursera/Data Science/R scripts/Data products assignment")
shinyapps::deployApp()
library(shiny)
#shinyapps::setAccountInfo(name='kvdm101', token='45BBCF0097EB7360E95E8B13463100B9', secret='aGxsfli6X53vQgvt/QC5xub+feNpu5dAjl9POZ5q')
setwd("C:/Users/Karin-PC/Documents/Coursera/Data Science/R Scripts/Data products assignment")
#shinyapps::deployApp("C:/Users/Karin-PC/Documents/Coursera/Data Science/R scripts/Data products assignment")
shinyapps::deployApp("CancerData")
library(shiny)
#shinyapps::setAccountInfo(name='kvdm101', token='45BBCF0097EB7360E95E8B13463100B9', secret='aGxsfli6X53vQgvt/QC5xub+feNpu5dAjl9POZ5q')
setwd("C:/Users/Karin-PC/Documents/Coursera/Data Science/R Scripts/Data products assignment")
#shinyapps::deployApp("C:/Users/Karin-PC/Documents/Coursera/Data Science/R scripts/Data products assignment")
shinyapps::deployApp("CancerData")
shiny::runApp('~/Coursera/Data Science/R scripts/Data products assignment/CancerData')
library(shiny)
library(ggplot2)
#shinyapps::setAccountInfo(name='kvdm101', token='45BBCF0097EB7360E95E8B13463100B9', secret='aGxsfli6X53vQgvt/QC5xub+feNpu5dAjl9POZ5q')
setwd("C:/Users/Karin-PC/Documents/Coursera/Data Science/R Scripts/Data products assignment")
#shinyapps::deployApp("C:/Users/Karin-PC/Documents/Coursera/Data Science/R scripts/Data products assignment")
shinyapps::deployApp("CancerData")
setwd("C:/Users/Karin-PC/Documents/Coursera/Data Science/R Scripts/Data products assignment")
#shinyapps::deployApp("C:/Users/Karin-PC/Documents/Coursera/Data Science/R scripts/Data products assignment")
rsconnect::configureApp("CancerData", size="medium")
library(shiny)
library(ggplot2)
shinyapps::deployApp("CancerData")
